1.	Write a MongoDb query to display all the documents in the collection restaurants.
db.addresses.find()
2.	Write a MongoDb query to display the fields restaurants_id, name, borough and cuisine for all the documents in the collection restaurant.
db.addresses.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
3.	Write a MongoDb query to display the fields restaurants_id, name, borough and cuisine, but exclude the field _id  for all the documents in the collection restaurant.
db.addresses.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0})
4.	Write a MongoDb query to display the fields restaurants_id, name, borough and zip code, but exclude the field_id for all the documents in the collection restaurant.
db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1,"_id":0});
5.	Write a MongoDb query to display the first 5 restaurants which is in the borough Bronx.
db.addresses.find({"borough":"Bronx"}).limit(5)
6.	Write a MongoDb query to display all the restaurant which is in the borough Bronx.
db.addresses.find({"borough":"Bronx"})
7.	Write a MongoDb query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.addresses.find({"borough":"Bronx"}).skip(5).limit(5)
8.	Write a MongoDb query to find the restaurants who achieved a score more than 90.
db.addresses.find({"grades.score":{$gt:90}})
9.	Write a MongoDb query to find the restaurants that achieved a score, more than 80 but less than 100.

10.	Write a MongoDb query to find the restaurants which locate in latitude value less than -95.754168.
db.addresses.find({"address.coord":{$lt:-95.754168}})
11.	 Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
db.addresses.find({$and:[{"cuisine":{$ne:'American'}},{"grades.score":{$gt:70}},{"address.coord":{$lt:-65.754168}}]})
12.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.

13.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 
db.addresses.find({"cuisine":{$ne:"American"},"grades.grade":'A',"borough":{$ne:"Brooklyn"}}).sort({"cuisine":-1})
14.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
db.addresses.find({"name":/^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
15.	db.addresses.find({"name":/ces$/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
16.	db.addresses.find({"name":/.*Reg.*/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
17.	db.addresses.find({"borough":"Bronx",$or:[{"cuisine":"American"},{"cuisine":"Chinese"}]})
18.	db.addresses.find({"borough":{$in:["Staten Island","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
19.	db.addresses.find({"borough":{$nin:["Staten Island","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
20.	db.addresses.find({"grades.score":{$not:{$gt:10}}},{"restaurant_id":1,"name":1,"cuisine":1,"borough":1})
21.	db.addresses.find({$or:[{"name":/^Wil/},{$and:[{"cusine":{$ne:"American"}},{"cusine":{$ne:"Chinese"}}]}]},{"restaurant_id":1,"name":1,"cuisine":1,"borough":1})
22.	db.addresses.find({"grades.grade":'A',"grades.score":11, "grades.date":ISODate("2014-08-  11T00:00:00Z")},{"restaurant_id":1,"name":1,"grades":1})
23.	
24.	db.addresses.find({"address.coord.1":{$gt:42,$lt:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1})
25.	db.addresses.find().sort({"name":1})
26.	db.addresses.find().sort({"name":-1})
27.	db.addresses.find().sort({"cuisine":1,"borough":-1})
28.	db.addresses.find({"address.street":{$exists:true}})